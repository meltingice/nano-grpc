/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var Blocks_pb = require('./Blocks_pb.js');
goog.exportSymbol('proto.nano.ActiveConfirmationRequest', null, global);
goog.exportSymbol('proto.nano.ConfirmationHistoryResponse', null, global);
goog.exportSymbol('proto.nano.ConfirmationHistoryResponse.Confirmation', null, global);
goog.exportSymbol('proto.nano.ConfirmationInfoRequest', null, global);
goog.exportSymbol('proto.nano.ConfirmationInfoResponse', null, global);
goog.exportSymbol('proto.nano.ConfirmationInfoResponse.Confirmation', null, global);
goog.exportSymbol('proto.nano.ConfirmationQuorumRequest', null, global);
goog.exportSymbol('proto.nano.ConfirmationQuorumResponse', null, global);
goog.exportSymbol('proto.nano.ConfirmationQuorumResponse.Peer', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nano.ActiveConfirmationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nano.ActiveConfirmationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nano.ActiveConfirmationRequest.displayName = 'proto.nano.ActiveConfirmationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nano.ActiveConfirmationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nano.ActiveConfirmationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nano.ActiveConfirmationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ActiveConfirmationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    announcements: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nano.ActiveConfirmationRequest}
 */
proto.nano.ActiveConfirmationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nano.ActiveConfirmationRequest;
  return proto.nano.ActiveConfirmationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nano.ActiveConfirmationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nano.ActiveConfirmationRequest}
 */
proto.nano.ActiveConfirmationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAnnouncements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nano.ActiveConfirmationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nano.ActiveConfirmationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nano.ActiveConfirmationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ActiveConfirmationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnouncements();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 announcements = 1;
 * @return {number}
 */
proto.nano.ActiveConfirmationRequest.prototype.getAnnouncements = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nano.ActiveConfirmationRequest.prototype.setAnnouncements = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nano.ConfirmationHistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nano.ConfirmationHistoryResponse.repeatedFields_, null);
};
goog.inherits(proto.nano.ConfirmationHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nano.ConfirmationHistoryResponse.displayName = 'proto.nano.ConfirmationHistoryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nano.ConfirmationHistoryResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nano.ConfirmationHistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nano.ConfirmationHistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nano.ConfirmationHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationHistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    average: jspb.Message.getFieldWithDefault(msg, 2, 0),
    confirmationsList: jspb.Message.toObjectList(msg.getConfirmationsList(),
    proto.nano.ConfirmationHistoryResponse.Confirmation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nano.ConfirmationHistoryResponse}
 */
proto.nano.ConfirmationHistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nano.ConfirmationHistoryResponse;
  return proto.nano.ConfirmationHistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nano.ConfirmationHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nano.ConfirmationHistoryResponse}
 */
proto.nano.ConfirmationHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAverage(value);
      break;
    case 3:
      var value = new proto.nano.ConfirmationHistoryResponse.Confirmation;
      reader.readMessage(value,proto.nano.ConfirmationHistoryResponse.Confirmation.deserializeBinaryFromReader);
      msg.addConfirmations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nano.ConfirmationHistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nano.ConfirmationHistoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nano.ConfirmationHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationHistoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAverage();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getConfirmationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.nano.ConfirmationHistoryResponse.Confirmation.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nano.ConfirmationHistoryResponse.Confirmation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nano.ConfirmationHistoryResponse.Confirmation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nano.ConfirmationHistoryResponse.Confirmation.displayName = 'proto.nano.ConfirmationHistoryResponse.Confirmation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.toObject = function(opt_includeInstance) {
  return proto.nano.ConfirmationHistoryResponse.Confirmation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nano.ConfirmationHistoryResponse.Confirmation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationHistoryResponse.Confirmation.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    tally: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nano.ConfirmationHistoryResponse.Confirmation}
 */
proto.nano.ConfirmationHistoryResponse.Confirmation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nano.ConfirmationHistoryResponse.Confirmation;
  return proto.nano.ConfirmationHistoryResponse.Confirmation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nano.ConfirmationHistoryResponse.Confirmation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nano.ConfirmationHistoryResponse.Confirmation}
 */
proto.nano.ConfirmationHistoryResponse.Confirmation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTally(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nano.ConfirmationHistoryResponse.Confirmation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nano.ConfirmationHistoryResponse.Confirmation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationHistoryResponse.Confirmation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTally();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 duration = 2;
 * @return {number}
 */
proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.setDuration = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string tally = 4;
 * @return {string}
 */
proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.getTally = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.nano.ConfirmationHistoryResponse.Confirmation.prototype.setTally = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.nano.ConfirmationHistoryResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nano.ConfirmationHistoryResponse.prototype.setCount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 average = 2;
 * @return {number}
 */
proto.nano.ConfirmationHistoryResponse.prototype.getAverage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nano.ConfirmationHistoryResponse.prototype.setAverage = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Confirmation confirmations = 3;
 * @return {!Array.<!proto.nano.ConfirmationHistoryResponse.Confirmation>}
 */
proto.nano.ConfirmationHistoryResponse.prototype.getConfirmationsList = function() {
  return /** @type{!Array.<!proto.nano.ConfirmationHistoryResponse.Confirmation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nano.ConfirmationHistoryResponse.Confirmation, 3));
};


/** @param {!Array.<!proto.nano.ConfirmationHistoryResponse.Confirmation>} value */
proto.nano.ConfirmationHistoryResponse.prototype.setConfirmationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.nano.ConfirmationHistoryResponse.Confirmation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nano.ConfirmationHistoryResponse.Confirmation}
 */
proto.nano.ConfirmationHistoryResponse.prototype.addConfirmations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.nano.ConfirmationHistoryResponse.Confirmation, opt_index);
};


proto.nano.ConfirmationHistoryResponse.prototype.clearConfirmationsList = function() {
  this.setConfirmationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nano.ConfirmationInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nano.ConfirmationInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nano.ConfirmationInfoRequest.displayName = 'proto.nano.ConfirmationInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nano.ConfirmationInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nano.ConfirmationInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nano.ConfirmationInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    root: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contents: jspb.Message.getFieldWithDefault(msg, 2, false),
    representatives: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nano.ConfirmationInfoRequest}
 */
proto.nano.ConfirmationInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nano.ConfirmationInfoRequest;
  return proto.nano.ConfirmationInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nano.ConfirmationInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nano.ConfirmationInfoRequest}
 */
proto.nano.ConfirmationInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoot(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContents(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRepresentatives(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nano.ConfirmationInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nano.ConfirmationInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nano.ConfirmationInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoot();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContents();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRepresentatives();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string root = 1;
 * @return {string}
 */
proto.nano.ConfirmationInfoRequest.prototype.getRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nano.ConfirmationInfoRequest.prototype.setRoot = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool contents = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nano.ConfirmationInfoRequest.prototype.getContents = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.nano.ConfirmationInfoRequest.prototype.setContents = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool representatives = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nano.ConfirmationInfoRequest.prototype.getRepresentatives = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.nano.ConfirmationInfoRequest.prototype.setRepresentatives = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nano.ConfirmationInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nano.ConfirmationInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nano.ConfirmationInfoResponse.displayName = 'proto.nano.ConfirmationInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nano.ConfirmationInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nano.ConfirmationInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nano.ConfirmationInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    announcements: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lastWinner: jspb.Message.getFieldWithDefault(msg, 2, ""),
    totalTally: jspb.Message.getFieldWithDefault(msg, 3, ""),
    blocksMap: (f = msg.getBlocksMap()) ? f.toObject(includeInstance, proto.nano.ConfirmationInfoResponse.Confirmation.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nano.ConfirmationInfoResponse}
 */
proto.nano.ConfirmationInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nano.ConfirmationInfoResponse;
  return proto.nano.ConfirmationInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nano.ConfirmationInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nano.ConfirmationInfoResponse}
 */
proto.nano.ConfirmationInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAnnouncements(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastWinner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalTally(value);
      break;
    case 4:
      var value = msg.getBlocksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nano.ConfirmationInfoResponse.Confirmation.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nano.ConfirmationInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nano.ConfirmationInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nano.ConfirmationInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnouncements();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLastWinner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTotalTally();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBlocksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nano.ConfirmationInfoResponse.Confirmation.serializeBinaryToWriter);
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nano.ConfirmationInfoResponse.Confirmation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nano.ConfirmationInfoResponse.Confirmation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nano.ConfirmationInfoResponse.Confirmation.displayName = 'proto.nano.ConfirmationInfoResponse.Confirmation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nano.ConfirmationInfoResponse.Confirmation.prototype.toObject = function(opt_includeInstance) {
  return proto.nano.ConfirmationInfoResponse.Confirmation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nano.ConfirmationInfoResponse.Confirmation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationInfoResponse.Confirmation.toObject = function(includeInstance, msg) {
  var f, obj = {
    tally: jspb.Message.getFieldWithDefault(msg, 1, ""),
    block: (f = msg.getBlock()) && Blocks_pb.Block.toObject(includeInstance, f),
    representativesMap: (f = msg.getRepresentativesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nano.ConfirmationInfoResponse.Confirmation}
 */
proto.nano.ConfirmationInfoResponse.Confirmation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nano.ConfirmationInfoResponse.Confirmation;
  return proto.nano.ConfirmationInfoResponse.Confirmation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nano.ConfirmationInfoResponse.Confirmation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nano.ConfirmationInfoResponse.Confirmation}
 */
proto.nano.ConfirmationInfoResponse.Confirmation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTally(value);
      break;
    case 2:
      var value = new Blocks_pb.Block;
      reader.readMessage(value,Blocks_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 3:
      var value = msg.getRepresentativesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nano.ConfirmationInfoResponse.Confirmation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nano.ConfirmationInfoResponse.Confirmation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nano.ConfirmationInfoResponse.Confirmation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationInfoResponse.Confirmation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTally();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Blocks_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getRepresentativesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string tally = 1;
 * @return {string}
 */
proto.nano.ConfirmationInfoResponse.Confirmation.prototype.getTally = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nano.ConfirmationInfoResponse.Confirmation.prototype.setTally = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Block block = 2;
 * @return {?proto.nano.Block}
 */
proto.nano.ConfirmationInfoResponse.Confirmation.prototype.getBlock = function() {
  return /** @type{?proto.nano.Block} */ (
    jspb.Message.getWrapperField(this, Blocks_pb.Block, 2));
};


/** @param {?proto.nano.Block|undefined} value */
proto.nano.ConfirmationInfoResponse.Confirmation.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nano.ConfirmationInfoResponse.Confirmation.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nano.ConfirmationInfoResponse.Confirmation.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, string> representatives = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nano.ConfirmationInfoResponse.Confirmation.prototype.getRepresentativesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.nano.ConfirmationInfoResponse.Confirmation.prototype.clearRepresentativesMap = function() {
  this.getRepresentativesMap().clear();
};


/**
 * optional int32 announcements = 1;
 * @return {number}
 */
proto.nano.ConfirmationInfoResponse.prototype.getAnnouncements = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nano.ConfirmationInfoResponse.prototype.setAnnouncements = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string last_winner = 2;
 * @return {string}
 */
proto.nano.ConfirmationInfoResponse.prototype.getLastWinner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nano.ConfirmationInfoResponse.prototype.setLastWinner = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string total_tally = 3;
 * @return {string}
 */
proto.nano.ConfirmationInfoResponse.prototype.getTotalTally = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.nano.ConfirmationInfoResponse.prototype.setTotalTally = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * map<string, Confirmation> blocks = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nano.ConfirmationInfoResponse.Confirmation>}
 */
proto.nano.ConfirmationInfoResponse.prototype.getBlocksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nano.ConfirmationInfoResponse.Confirmation>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.nano.ConfirmationInfoResponse.Confirmation));
};


proto.nano.ConfirmationInfoResponse.prototype.clearBlocksMap = function() {
  this.getBlocksMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nano.ConfirmationQuorumRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nano.ConfirmationQuorumRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nano.ConfirmationQuorumRequest.displayName = 'proto.nano.ConfirmationQuorumRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nano.ConfirmationQuorumRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nano.ConfirmationQuorumRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nano.ConfirmationQuorumRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationQuorumRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerDetails: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nano.ConfirmationQuorumRequest}
 */
proto.nano.ConfirmationQuorumRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nano.ConfirmationQuorumRequest;
  return proto.nano.ConfirmationQuorumRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nano.ConfirmationQuorumRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nano.ConfirmationQuorumRequest}
 */
proto.nano.ConfirmationQuorumRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPeerDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nano.ConfirmationQuorumRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nano.ConfirmationQuorumRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nano.ConfirmationQuorumRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationQuorumRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerDetails();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool peer_details = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nano.ConfirmationQuorumRequest.prototype.getPeerDetails = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.nano.ConfirmationQuorumRequest.prototype.setPeerDetails = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nano.ConfirmationQuorumResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nano.ConfirmationQuorumResponse.repeatedFields_, null);
};
goog.inherits(proto.nano.ConfirmationQuorumResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nano.ConfirmationQuorumResponse.displayName = 'proto.nano.ConfirmationQuorumResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nano.ConfirmationQuorumResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nano.ConfirmationQuorumResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nano.ConfirmationQuorumResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nano.ConfirmationQuorumResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationQuorumResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    quorumDelta: jspb.Message.getFieldWithDefault(msg, 1, ""),
    onlineWeightQuorumPercent: jspb.Message.getFieldWithDefault(msg, 2, 0),
    onlineWeightMinimum: jspb.Message.getFieldWithDefault(msg, 3, ""),
    onlineStakeTotal: jspb.Message.getFieldWithDefault(msg, 4, ""),
    peersStakeTotal: jspb.Message.getFieldWithDefault(msg, 5, ""),
    peersList: jspb.Message.toObjectList(msg.getPeersList(),
    proto.nano.ConfirmationQuorumResponse.Peer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nano.ConfirmationQuorumResponse}
 */
proto.nano.ConfirmationQuorumResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nano.ConfirmationQuorumResponse;
  return proto.nano.ConfirmationQuorumResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nano.ConfirmationQuorumResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nano.ConfirmationQuorumResponse}
 */
proto.nano.ConfirmationQuorumResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuorumDelta(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOnlineWeightQuorumPercent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnlineWeightMinimum(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnlineStakeTotal(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeersStakeTotal(value);
      break;
    case 6:
      var value = new proto.nano.ConfirmationQuorumResponse.Peer;
      reader.readMessage(value,proto.nano.ConfirmationQuorumResponse.Peer.deserializeBinaryFromReader);
      msg.addPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nano.ConfirmationQuorumResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nano.ConfirmationQuorumResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nano.ConfirmationQuorumResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationQuorumResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuorumDelta();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOnlineWeightQuorumPercent();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOnlineWeightMinimum();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOnlineStakeTotal();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPeersStakeTotal();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.nano.ConfirmationQuorumResponse.Peer.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nano.ConfirmationQuorumResponse.Peer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nano.ConfirmationQuorumResponse.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nano.ConfirmationQuorumResponse.Peer.displayName = 'proto.nano.ConfirmationQuorumResponse.Peer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nano.ConfirmationQuorumResponse.Peer.prototype.toObject = function(opt_includeInstance) {
  return proto.nano.ConfirmationQuorumResponse.Peer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nano.ConfirmationQuorumResponse.Peer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationQuorumResponse.Peer.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ipAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    weight: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nano.ConfirmationQuorumResponse.Peer}
 */
proto.nano.ConfirmationQuorumResponse.Peer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nano.ConfirmationQuorumResponse.Peer;
  return proto.nano.ConfirmationQuorumResponse.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nano.ConfirmationQuorumResponse.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nano.ConfirmationQuorumResponse.Peer}
 */
proto.nano.ConfirmationQuorumResponse.Peer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nano.ConfirmationQuorumResponse.Peer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nano.ConfirmationQuorumResponse.Peer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nano.ConfirmationQuorumResponse.Peer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nano.ConfirmationQuorumResponse.Peer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIpAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWeight();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string account = 1;
 * @return {string}
 */
proto.nano.ConfirmationQuorumResponse.Peer.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nano.ConfirmationQuorumResponse.Peer.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string ip_address = 2;
 * @return {string}
 */
proto.nano.ConfirmationQuorumResponse.Peer.prototype.getIpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nano.ConfirmationQuorumResponse.Peer.prototype.setIpAddress = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string weight = 3;
 * @return {string}
 */
proto.nano.ConfirmationQuorumResponse.Peer.prototype.getWeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.nano.ConfirmationQuorumResponse.Peer.prototype.setWeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string quorum_delta = 1;
 * @return {string}
 */
proto.nano.ConfirmationQuorumResponse.prototype.getQuorumDelta = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nano.ConfirmationQuorumResponse.prototype.setQuorumDelta = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 online_weight_quorum_percent = 2;
 * @return {number}
 */
proto.nano.ConfirmationQuorumResponse.prototype.getOnlineWeightQuorumPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nano.ConfirmationQuorumResponse.prototype.setOnlineWeightQuorumPercent = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string online_weight_minimum = 3;
 * @return {string}
 */
proto.nano.ConfirmationQuorumResponse.prototype.getOnlineWeightMinimum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.nano.ConfirmationQuorumResponse.prototype.setOnlineWeightMinimum = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string online_stake_total = 4;
 * @return {string}
 */
proto.nano.ConfirmationQuorumResponse.prototype.getOnlineStakeTotal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.nano.ConfirmationQuorumResponse.prototype.setOnlineStakeTotal = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string peers_stake_total = 5;
 * @return {string}
 */
proto.nano.ConfirmationQuorumResponse.prototype.getPeersStakeTotal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.nano.ConfirmationQuorumResponse.prototype.setPeersStakeTotal = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated Peer peers = 6;
 * @return {!Array.<!proto.nano.ConfirmationQuorumResponse.Peer>}
 */
proto.nano.ConfirmationQuorumResponse.prototype.getPeersList = function() {
  return /** @type{!Array.<!proto.nano.ConfirmationQuorumResponse.Peer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nano.ConfirmationQuorumResponse.Peer, 6));
};


/** @param {!Array.<!proto.nano.ConfirmationQuorumResponse.Peer>} value */
proto.nano.ConfirmationQuorumResponse.prototype.setPeersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.nano.ConfirmationQuorumResponse.Peer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nano.ConfirmationQuorumResponse.Peer}
 */
proto.nano.ConfirmationQuorumResponse.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.nano.ConfirmationQuorumResponse.Peer, opt_index);
};


proto.nano.ConfirmationQuorumResponse.prototype.clearPeersList = function() {
  this.setPeersList([]);
};


goog.object.extend(exports, proto.nano);
